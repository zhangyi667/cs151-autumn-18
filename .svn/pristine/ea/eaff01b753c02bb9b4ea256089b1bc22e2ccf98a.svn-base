#lang typed/racket

(require typed/test-engine/racket-tests)
(require "../include/cs151-core.rkt")

(define-type (Order a)
  (a a -> Boolean))

(define-struct (Some a)
  ([value : a]))

(define-type (Optional a)
  (U 'None (Some a)))

(define-struct (Pair a b)
  ([item1 : a]
   [item2 : b]))

(define-struct (Nd a b)
  ([key   : a]
   [value : b]
   [lsub : (BST a b)]
   [rsub : (BST a b)]))

(define-type (BST a b)
  (U 'E (Nd a b)))

;; The type of a BST map that maps alphas to betas.
(define-struct (BSTMap a b)
  ([ord  : (Order a)]
   [data : (BST a b)]))

;; used for check expects
(: m : (BSTMap Integer String))
(define m
    (BSTMap < (Nd 1 "a" 'E (Nd 3 "c" (Nd 2 "b" 'E 'E) (Nd 4 "d" 'E 'E)))))

;; If the given key is in the map and associated with value v, return Some v.
;; If the key is absent from the map, return 'None.
;; Be sure to navigate the BST and not to search it exhaustively.
(: lookup : All (a b) a (BSTMap a b) -> (Optional b))
(define (lookup x map)
  (match map
    [(BSTMap order data)
     (local {(: lp : (BST a b) -> (Optional b))
             (define (lp t)
               (match t
                 ['E 'None]
                 [(Nd key value lsub rsub)
                  (cond
                    [(order x key) (lp lsub)]
                    [(order key x) (lp rsub)]
                    [else (Some value)])]))}
       (lp data))]))

(check-expect (lookup 4 m) (Some "d"))
(check-expect (lookup 1 m) (Some "a"))
(check-expect (lookup 5 m) 'None)
#lang typed/racket

(require typed/test-engine/racket-tests)

(require "../include/cs151-core.rkt")
(require "../include/cs151-image.rkt")
(require "../include/cs151-universe.rkt")

;; data definitions

(define-struct (Some a)
  ([value : a]))

(define-type (Optional a)
  (U 'None (Some a)))

(define-type Stone
  (U 'black 'white))

(define-struct LogicalLoc
  ([col : Integer]
   [row : Integer]))
   
(define-struct Go
  ([dimension : Integer]
   [black-stones : (Listof LogicalLoc)]
   [white-stones : (Listof LogicalLoc)]
   [next-to-play : Stone]))

(define-struct PhysicalLoc
  ([x-offset-from-left : Integer]
   [y-offset-from-top  : Integer]))

(define-struct BoardSpec
  ([background-color : Image-Color]
   [cell-size-pixels : Integer]
   [margin-pixels : Integer]
   [stone-radius-pixels : Integer]))

(define-struct World
  ([spec : BoardSpec]
   [game : Go]
   [status-message : String]))

;; the integer argument is the dimension (locations per side) of the board
(: logical->physical : LogicalLoc Integer BoardSpec -> PhysicalLoc)
(define (logical->physical ll n bs)
  (match* (ll bs)
    [((LogicalLoc x y) (BoardSpec col cell mar r))
     (PhysicalLoc (+ mar (* x cell)) (+ mar (* (- n y) cell)))]))

(check-expect (logical->physical (LogicalLoc 1 1) 19 (BoardSpec 'tan 20 12 5)) (PhysicalLoc 32 372))
(check-expect (logical->physical (LogicalLoc 18 2) 19 (BoardSpec 'tan 12 5 4)) (PhysicalLoc 221 209))
(check-expect (logical->physical (LogicalLoc 0 0) 19 (BoardSpec 'tan 24 14 7)) (PhysicalLoc 14 470)) 

;; the integer argument is the dimension (locations per side) of the board
(: physical->logical : PhysicalLoc Integer BoardSpec -> (Optional LogicalLoc))
(define (physical->logical pl n bs)
  (match* (pl bs)
    [((PhysicalLoc x y) (BoardSpec col cell mar r))
     (local {(define llx (round (/ (- x mar) cell)))
             (define lly (round (- n (/ (- y mar) cell))))}
       (LogicalLoc llx lly))]))


(test)
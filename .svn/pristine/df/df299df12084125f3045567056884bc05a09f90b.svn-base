#lang typed/racket

(require typed/test-engine/racket-tests)
(require "../include/cs151-core.rkt")

(define-struct (Some a)
  ([value : a]))

(define-type (Optional a)
  (U 'None (Some a)))

(define-type Candidate
  Symbol)
  
(define-type Ballot
  (Listof Candidate))

(define-type Ballots
  (Listof Ballot))

(define-struct CandCount
  ([cand  : Candidate]
   [count : Integer]))

(define-type Tally
  (Listof CandCount))

;; Count all the first-choice votes in the current round.
;(: tally : Ballots -> Tally)
;(define (tally list)
;  (match list

;    [(cons h t) (choice1 h

(define sample-ballots
  (list (list 'A 'C 'B) (list 'A 'B) (list 'B 'C) (list 'C 'B 'A) (list 'C 'B)))

;; returns a list of the first choices of a list of ballots
(: choice1 : Ballots -> (Listof Candidate))
(define (choice1 list)
  (match list
    ['() '()]
    [(cons h t)
     (match h
       ['() '()]
       [(cons hd _) (cons hd (choice1 t))])]))

(check-expect (choice1 sample-ballots) '(A A B C C))
(check-expect (choice1 '((A B C) (B C A))) '(A B))




(test)
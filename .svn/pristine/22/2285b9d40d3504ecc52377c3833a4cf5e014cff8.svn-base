#lang typed/racket
(require typed/test-engine/racket-tests)

(require "../include/cs151-core.rkt")
(require "../include/cs151-image.rkt")
(require "../include/cs151-universe.rkt")

(: dt Positive-Real)
(define dt 1/30)

(define-struct Ball
  ([y-position : Real] ;; the height of the ball's center in meters, with the ground y=0
   [radius     : Integer] ;; in meters
   [velocity   : Real] ;; in meters per second
   [elasticity : Real] ;; a number between 0 and 1
   [color      : Image-Color]))

(define-struct World
  ([ball1 : Ball]
   [ball2 : Ball]
   [ball3 : Ball]
   [background : Image]
   [time-elapsed : Real]))

;; make-circle: draws circle from information given to Ball
(: make-circle (Ball -> Image))
(define (make-circle b)
  (circle (Ball-radius b) "solid" (Ball-color b)))

;(make-circle (Ball 200 10 0 0.7 "darkred"))

(: draw (World -> Image))
(define (draw w)
  (match w
    [(World b1 b2 b3 image time)
     (above (text (number->string (exact-ceiling time)) 30 "black")
            (text (string-append (number->string (exact-ceiling (Ball-y-position b1)))
                                 "          "
                                 (number->string (exact-ceiling (Ball-y-position b2)))
                                 "          "
                                 (number->string (exact-ceiling (Ball-y-position b3)))) 20 "black")
            (place-image (make-circle b1) (exact-ceiling (* 1/4 (image-width image))) (- (image-height image) (Ball-y-position b1) (Ball-radius b1))
                         (place-image (make-circle b2) (exact-ceiling (* 1/2 (image-width image))) (- (image-height image) (Ball-y-position b2) (Ball-radius b2))
                                      (place-image (make-circle b3) (exact-ceiling (* 3/4 (image-width image))) (- (image-height image) (Ball-y-position b3) (Ball-radius b3)) image))))]))
           
;; new-velocity: helper function for current velocity
(: new-velocity (Ball -> Real))
(define (new-velocity b)
   (max 0 (- (* (- (Ball-elasticity b)) (Ball-velocity b)) 0.5)))

(: tick-ball (Ball -> Ball))
(define (tick-ball b)
  (cond
    [(<= (Ball-y-position b) 0)
     (Ball (* (new-velocity b) dt) (Ball-radius b) (new-velocity b) (Ball-elasticity b) (Ball-color b))]
    [(< (+ (Ball-y-position b) (* (Ball-velocity b) dt)) 0)
     (Ball 0 (Ball-radius b) (+ (Ball-velocity b) (* dt (- 9.8))) (Ball-elasticity b) (Ball-color b))]
    [else (Ball (+ (Ball-y-position b) (* (Ball-velocity b) dt)) (Ball-radius b) (+ (Ball-velocity b) (* dt (- 9.8))) (Ball-elasticity b) (Ball-color b))]))

  
;  (match b
;    [(Ball (y r v e c)
;     (Ball (* v dt) r (max 0 (- (* (- e) v) 0.5)) e c)]
;    [(Ball y r v e c)
;     (Ball (+ y (* v dt)) r (+ v (* dt (- 9.8))) e c)]))

(: tick (World -> World))
(define (tick w)
  (match w
    [(World b1 b2 b3 image time)
     (World (tick-ball b1) (tick-ball b2) (tick-ball b3) image (+ dt time))]))

(: run-simulation (Ball Ball Ball Image -> World))
(define (run-simulation b1 b2 b3 image)
  (big-bang (World b1 b2 b3 image 0) : World
    [to-draw draw]
    [on-tick tick]))

;(draw (World (Ball 200 10 0 0.7 "red")
;             (Ball 100 10 0 0.8 "yellow")
;             (Ball 20 10 0 0.6 "blue")
;             (rectangle 200 300 "solid" "silver") 0))

(run-simulation (Ball 200 10 0 0.7 "red")
                (Ball 200 10 0 0.8 "yellow")
                (Ball 200 10 0 0.6 "blue")
                (rectangle 1800 300 "solid" "silver"))

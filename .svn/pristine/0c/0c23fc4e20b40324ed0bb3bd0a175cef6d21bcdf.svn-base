#lang typed/racket
(require typed/test-engine/racket-tests)
(require "../include/cs151-core.rkt")

;; nm->km: converts a measurement in nautical miles to kilometers
(: nm->km (Exact-Rational -> Exact-Rational))
(define (nm->km x)
  (* 1852/1000 x))

(check-within (nm->km 10) 18.52 0.00001)
(check-within (nm->km 99) (* 99 1.852) 0.00001)

;; km->nm: converts a measurement in kilometers to nautical miles
(: km->nm (Exact-Rational -> Exact-Rational))
(define (km->nm x)
  (* 1000/1852 x))

(check-within (km->nm 10) (/ 10000 1852) 0.0001)
(check-within (km->nm 1852) 1000 0.00001)

;; coins->cents: computes total number of cents given quarters,
;; dimes, nickels, and pennies
(: coins->cents (Integer Integer Integer Integer -> Integer))
(define (coins->cents q d n p)
  (+ (* 25 q) (* 10 d) (* 5 n) p))

(check-expect (coins->cents 1 1 1 1) 41)
(check-expect (coins->cents 100 0 0 0) 2500)
(check-expect (coins->cents 0 0 0 0) 0)

;; eval-quad: given the 3 coefficients of a quadratic equation and
;; the x value, compute the corresponding y value on the parabola
(: eval-quad (Real Real Real Real -> Real))
(define (eval-quad a b c x)
  (+ (* a x x) (* b x) c))

(check-within (eval-quad 3 2 1 8) 209 0.00001)
(check-within (eval-quad 0.1 0.1 0.1 0.1) 0.111 0.00001)

;; distance-fallen: given the number of seconds that an object has been in
;; free-fall, calculate how far the object has traveled in meters
(: distance-fallen (Real -> Real))
(define (distance-fallen t)
  (* 1/2 98/10 t t))

(check-within (distance-fallen 10) 490 0.00001)
(check-within (distance-fallen 9.5) 442.225 0.00001)

;; seconds-to-fall: given how far an object has fallen in meters,
;; calculate how long the object has been in free-fall
(: seconds-to-fall (Real -> Real))
(define (seconds-to-fall d)
  (sqrt (* d 10/49)))

(check-within (seconds-to-fall 490) 10 0.00001)
(check-within (seconds-to-fall 442.225) 9.5 0.00001)












(test)